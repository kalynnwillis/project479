{
  "hash": "badd66d960b9e074346bc054abde0aec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NCAA Basketball RAPM\"\nsubtitle: \"Measuring Player Impact on Win Probability\"\nauthor: \"Your Name\"\ndate: today\nformat:\n  revealjs:\n    theme: simple\n    slide-number: true\n    chalkboard: true\n    preview-links: auto\n    transition: slide\n    background-transition: fade\nexecute:\n  echo: false\n  warning: false\n  message: false\n---\n\n## Research Question {.smaller}\n\n::: {.r-fit-text}\n**How do certain NCAA basketball players contribute to their team winning above others?**\n:::\n\n<br>\n\n::: incremental\n- Traditional stats (points, rebounds) don't capture full impact\n- Need to control for teammates and opponents\n- Want direct measure of **winning contribution**\n:::\n\n## Our Approach: RAPM {.smaller}\n\n**Regularized Adjusted Plus-Minus on Win Probability Scale**\n\n::: columns\n::: {.column width=\"50%\"}\n**What is RAPM?**\n\n- Regression-based player rating\n- Controls for context\n- Shrinkage to reduce noise\n:::\n\n::: {.column width=\"50%\"}\n**Why Win Probability?**\n\n- Direct impact on winning\n- Time-weighted (clutch matters)\n- Non-linear (blowouts vs close games)\n:::\n:::\n\n## Methodology Overview {.smaller}\n\n::: {.panel-tabset}\n### Step 1: Win Probability Model\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n### Step 2: Player Shifts\n\n- Extract lineup periods from play-by-play\n- Calculate ΔWP for each shift\n- Associate players: +1 (home), -1 (away)\n\n### Step 3: RAPM Regression\n\n$$\\Delta WP = \\sum_{i} \\beta_i \\cdot \\text{Player}_i + \\text{Teams} + \\epsilon$$\n\n- Ridge/Lasso/Elastic Net regularization\n- Shrinks estimates toward zero\n- Handles multicollinearity\n:::\n\n## Data {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Metric  |Count     |\n|:-------|:---------|\n|Games   |12,267    |\n|Plays   |3,962,372 |\n|Shifts  |2,785,978 |\n|Players |2,044     |\n\n\n:::\n:::\n\n\n**Source**: hoopR package via ESPN API (2023-24 season)\n\n## Results: RAPM Distribution\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Top 15 Players {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## RAPM vs. Playing Time\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=864}\n:::\n:::\n\n\n::: {.notes}\nPositive correlation, but lots of variation. Playing time ≠ performance.\n:::\n\n## Model Comparison: Ridge vs. Lasso\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n## Key Findings {.smaller}\n\n::: incremental\n1. **Win Probability Modeling Success**: XGBoost achieved 0.895 AUC (excellent prediction)\n\n2. **Elite Players Impact**: Top players add 0.001-0.003 WP per possession\n   - Over 70 possessions/game = substantial win probability shifts\n\n3. **Regularization Critical**: Ridge RAPM stable; Lasso too conservative for noisy data\n\n4. **Minutes ≠ Value**: Positive correlation but high-minute players can have negative RAPM\n   - Playing time driven by multiple factors beyond pure performance\n:::\n\n## Interpretation Example {.smaller}\n\n\n::: {.cell}\n\n:::\n\n\n**Top Player**: Jalen Celestine\n\n- RAPM: 0.00326\n- Games: 26\n- Avg Minutes: 27.5\n\n<br>\n\n::: {.fragment}\n**What does this mean?**\n\n- Adds ~0.33% to win probability per possession\n- Over 70 possessions/game ≈ 22.8% WP swing\n- Equivalent to multiple wins per season\n:::\n\n## Limitations & Solutions {.smaller}\n\n::: incremental\n1. **Lineup Data Challenge**\n   - Play-by-play lacks exact lineup information\n   - **Solution**: Approximate using box score participation\n   - Result: Affects precision but not relative rankings\n\n2. **Regularization Impact**\n   - Lasso shrunk coefficients to zero (too conservative)\n   - **Solution**: Focus on Ridge RAPM\n   \n3. **Sample Size**: Few-game players have uncertain estimates\n   - **Solution**: Filter to ≥10 games for main analysis\n\n4. **Context & Selection**\n   - Missing: role, matchups, defensive attention\n   - **Mitigation**: Team fixed effects, regularization\n:::\n\n## Future Directions {.smaller}\n\n::: incremental\n- **Multi-year analysis**: Track player development\n\n- **Offensive/Defensive splits**: Separate impact by end\n\n- **Bayesian priors**: Use recruiting rankings as informative priors\n\n- **Lineup-level RAPM**: Five-player unit effects\n\n- **Player tracking**: Incorporate SportVU data if available\n:::\n\n## Conclusion {.smaller}\n\n::: {.r-fit-text}\n**Successfully implemented RAPM for NCAA basketball on win probability scale**\n:::\n\n<br>\n\n::: incremental\n- ✅ Win probability models: Excellent prediction (AUC = 0.895)\n- ✅ Analyzed 2,044 players across 465 games\n- ✅ Ridge RAPM provides stable rankings despite data limitations\n- ✅ Direct interpretation: WP change per possession\n:::\n\n<br>\n\n::: {.fragment}\n**Main takeaway**: Even with approximate lineup data, RAPM successfully identifies elite contributors. Top players shift win probability by 0.1-0.2 (10-20%) per game compared to average players. The methodology demonstrates that advanced analytics can extract meaningful insights from imperfect real-world data.\n:::\n\n## Questions? {.smaller}\n\n<br>\n\n**Project repository**: All code, data, and documentation available\n\n<br>\n\n**Key outputs**:\n\n- RAPM rankings (CSV)\n- Model diagnostics\n- Visualizations\n- Full technical report\n\n<br>\n\nThank you!",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}